"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var de_1 = require("./de");
var REQUESTREPLY_PREFIX = '#reqrep/';
var PROGRESS_PREFIX = "#reqrep-progress/";
var Request = (function () {
    function Request(reply, progress) {
        var now = new Date().valueOf();
        this.lastProgress = now;
        this.requestTime = now;
        this.reply = reply;
        this.progress = progress;
    }
    return Request;
}());
var Requestor = (function () {
    function Requestor(de, channel, timeout, progressTimeout) {
        var _this = this;
        this.pendingRequests = {};
        this.request = function (msg, progressCallback, timeout, progressTimeout) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    timeout = timeout || this.timeout;
                    progressTimeout = progressTimeout || this.progressTimeout;
                    return [2, new Promise(function (resolve, reject) {
                            var id = de_1.generateUUID();
                            _this.de.connection.signalEvent(_this.channel, id, msg);
                            var intervalRef = setInterval(function () {
                                var now = new Date().valueOf();
                                var isProgressTimeout = (now > _this.pendingRequests[id].lastProgress + progressTimeout);
                                var isTimeout = (now > _this.pendingRequests[id].requestTime + timeout);
                                if (isProgressTimeout || isTimeout) {
                                    _this.pendingRequests[id] = null;
                                    clearInterval(intervalRef);
                                    reject(new de_1.TimeoutError("Timeout in request id " + id, isProgressTimeout));
                                }
                            }, 500);
                            var requestTime = new Date().valueOf();
                            _this.pendingRequests[id] = new Request(function (err, data) {
                                clearInterval(intervalRef);
                                if (err) {
                                    reject(new Error(err));
                                }
                                else {
                                    resolve(data);
                                }
                            }, progressCallback);
                        })];
                });
            });
        };
        this.timeout = timeout || 5000;
        this.progressTimeout = progressTimeout || 5000;
        this.channel = REQUESTREPLY_PREFIX + channel;
        this.progressChannel = PROGRESS_PREFIX + channel;
        this.de = de;
        this.progressListener = function (ev) {
            var req = _this.pendingRequests[ev.key];
            if (req) {
                req.lastProgress = new Date().valueOf();
                if (typeof req.progress === 'function') {
                    req.progress(ev.value.data);
                }
            }
        };
        this.replyListener = function (ev) {
            if (_this.pendingRequests[ev.key]) {
                _this.pendingRequests[ev.key].reply(ev.value.err, ev.value.data);
                _this.pendingRequests[ev.key] = null;
            }
        };
        de.connection.addListener(this.channel, '*', true, this.replyListener);
        de.connection.addListener(this.progressChannel, '*', true, this.progressListener);
    }
    Requestor.prototype.destroy = function () {
        this.de.connection.removeListener(this.progressListener);
        this.de.connection.removeListener(this.replyListener);
    };
    return Requestor;
}());
exports.Requestor = Requestor;
var Replier = (function () {
    function Replier(de, channel) {
        var _this = this;
        this.channel = REQUESTREPLY_PREFIX + channel;
        this.progressChannel = PROGRESS_PREFIX + channel;
        this.de = de;
        this.requestListener = function (ev) {
            _this.onMessage(ev.value, function (err, data) {
                var errmsg = (err instanceof Error) ? err.message : err;
                _this.de.connection.signalEvent(_this.channel, ev.key, { err: errmsg, data: data });
            }, function (data) {
                _this.de.connection.signalEvent(_this.progressChannel, ev.key, { data: data });
            });
        };
        de.connection.addListener(this.channel, '*', true, this.requestListener);
    }
    Replier.prototype.destroy = function () {
        this.de.connection.removeListener(this.requestListener);
    };
    return Replier;
}());
exports.Replier = Replier;
