import { PersistentConnection } from './de.connection';
export declare class TimeoutError extends Error {
    progressTimeout: boolean;
    constructor(message: any, progressTimeout: any);
}
export declare class AlreadyExistsError extends Error {
    constructor(message: any);
}
export declare function generateUUID(): string;
export declare class DataEngineSettings {
    bucket: string;
    host: string;
    port: number;
    path: string;
    apiKey: string;
    secure: boolean;
    enablePing: boolean;
    pingInterval: number;
    clientId: string;
}
export declare class RequestOptions {
    bucket: string;
    data: string;
    failIfExists: boolean;
    expire: string;
    async: boolean;
    forceHttp: Boolean;
    keysOnly: Boolean;
    filter: string;
    removeDataFromReply: boolean;
    constructor(options: any);
}
export declare class RequestOptionsInternal extends RequestOptions {
    url: string;
    method: string;
    key: string;
    forceHttp: Boolean;
    keysOnly: Boolean;
    filter: string;
    removeDataFromReply: boolean;
}
export declare class DataEngine {
    restClient: any;
    connection: PersistentConnection;
    settings: DataEngineSettings;
    private requestQueue;
    private pendingRequests;
    private internalizeRequestOptions;
    private checkOptions;
    read: (key: string, options?: RequestOptions) => Promise<any>;
    list: (options?: RequestOptions) => Promise<any>;
    write: (key: string, value: any, options?: RequestOptions) => Promise<any>;
    patch: (key: string, patch: string, options?: RequestOptions) => Promise<any>;
    remove: (key: string, options?: RequestOptions) => Promise<any>;
    private getUrl;
    private requestHttp(options);
    private request;
    private processRequestQueue();
    private close;
    constructor(settings?: DataEngineSettings);
}
