/// <reference types="node" />
import { DataEngine } from './de';
import { EventEmitter } from 'events';
export declare const JOB_NOT_SUPPORTED = 100;
export declare const NO_WORKER_AVAILABLE = 200;
export interface WorkCallback {
    (job: any, callback: (err: any, obj?: any) => any, progressCallback: (obj?: any) => any): any;
}
export declare class Worker {
    id: string;
    available: boolean;
    constructor(id: any);
    work: WorkCallback;
    release: () => void;
}
export interface JobQueryResponseCallback {
    (errno: number, worker?: Worker): void;
}
export interface JobQueryCallback {
    (job: any, responseCallback: (JobQueryResponseCallback) => void): void;
}
export declare class Producer {
    private statusQueue;
    private jobQueue;
    private timeout;
    private progressTimeout;
    private pendingJobs;
    private de;
    private jobStatusQueueListener;
    constructor(de: DataEngine, channel: string, timeout?: number, progressTimeout?: number);
    destroy(): void;
    addJob(job: any, progressCallback: any, timeout?: number, progressTimeout?: number): Promise<any>;
}
export declare class CompetingConsumer extends EventEmitter {
    onJobQuery: JobQueryCallback;
    private statusQueue;
    private jobQueue;
    private de;
    private jobQueueListener;
    private clientId;
    constructor(de: DataEngine, channel: string, clientId: string);
    destroy(): void;
    private jobHandler(key, job);
    private waitForWorker;
}
