import { DataEngineSettings } from './de';
import { RequestOptionsInternal } from './de';
export declare class PersistentConnection {
    onConnect: (connection: PersistentConnection) => any;
    onDisconnect: (connection: PersistentConnection) => any;
    onError: (err: any) => any;
    onPong: () => any;
    connected: boolean;
    id: string;
    enablePing: boolean;
    private requestID;
    private events;
    private sendValues;
    private ws;
    private eventsReceived;
    private skipReconnect;
    private connection;
    private requests;
    private requestTimer;
    private reconnectTimer;
    private pingTimer;
    private pingInterval;
    request: (options: RequestOptionsInternal) => Promise<any>;
    constructor(settings: DataEngineSettings);
    read: (bucket: string, key: string) => Promise<{}>;
    list: (bucket: string, keysOnly: boolean, filter: string) => Promise<{}>;
    write: (bucket: string, key: string, value: any, failIfExists?: boolean, expire?: string) => Promise<{}>;
    patch: (bucket: string, key: string, patch: any, removeDataFromReply: boolean) => Promise<{}>;
    delete: (bucket: string, key: string) => Promise<{}>;
    signalEvent: (bucket: string, key: string, value: any) => Promise<void>;
    close: () => void;
    addListener: (bucket: string, key: string, sendValues: boolean, callback: Function) => void;
    removeListener: (callback: any) => void;
    private addRequest;
    private handleReponse;
    private checkRequestTimeouts;
    private registerEvents;
    private wsStart(url);
}
