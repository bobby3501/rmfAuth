import { DataEngine } from './de';
export interface MessageResponseCallback {
    (err: any, data?: any): void;
}
export interface ProgressCallback {
    (obj: any): void;
}
export interface MessageCallback {
    (msg: any, responseCallback: MessageResponseCallback, progressCallback: ProgressCallback): void;
}
export declare class Requestor {
    private pendingRequests;
    private timeout;
    private progressTimeout;
    private de;
    private channel;
    private progressChannel;
    private progressListener;
    private replyListener;
    constructor(de: any, channel: any, timeout: any, progressTimeout: any);
    destroy(): void;
    request: (msg: any, progressCallback: ProgressCallback, timeout?: number, progressTimeout?: number) => Promise<any>;
}
export declare class Replier {
    onMessage: MessageCallback;
    private channel;
    private progressChannel;
    private de;
    private requestListener;
    constructor(de: DataEngine, channel: any);
    destroy(): void;
}
