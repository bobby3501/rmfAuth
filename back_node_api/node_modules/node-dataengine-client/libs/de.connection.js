"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketClient = require('websocket').w3cwebsocket;
var de_1 = require("./de");
var REQUEST_TIMEOUT = 3000;
var PersistentConnection = (function () {
    function PersistentConnection(settings) {
        this.connected = false;
        this.id = null;
        this.enablePing = false;
        this.requestID = 0;
        this.events = [];
        this.sendValues = false;
        this.ws = null;
        this.eventsReceived = 0;
        this.skipReconnect = false;
        this.connection = null;
        this.requests = [];
        this.requestTimer = null;
        this.reconnectTimer = null;
        this.pingTimer = null;
        this.pingInterval = 5000;
        this.request = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var bucket, method;
                return __generator(this, function (_a) {
                    if (!options.key)
                        options.key = '';
                    bucket = options.bucket || this.settings.bucket;
                    method = options.method || 'GET';
                    if ((method === 'GET') && (options.key === '')) {
                        return [2, this.list(bucket, options.keysOnly, options.filter)];
                    }
                    else if (method === 'GET') {
                        return [2, this.read(bucket, options.key)];
                    }
                    else if ((method === 'POST') || (method === 'PUT')) {
                        return [2, this.write(bucket, options.key, options.data, options.failIfExists, options.expire)];
                    }
                    else if (method === 'DELETE') {
                        return [2, this.delete(bucket, options.key)];
                    }
                    else if (method === 'PATCH') {
                        return [2, this.patch(bucket, options.key, options.data, options.removeDataFromReply)];
                    }
                    else if (method === 'EVENT') {
                        return [2, this.signalEvent(bucket, options.key, options.data)];
                    }
                    return [2];
                });
            });
        };
        this.read = function (bucket, key) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.addRequest({ op: 'read', bucket: bucket, key: key }, function (err, obj) {
                                if (err) {
                                    reject(new Error('DataEngine ws READ error: ' + JSON.stringify(err) + ' for bucket: ' + bucket + ', key: ' + key));
                                }
                                else {
                                    resolve(obj);
                                }
                            });
                        })];
                });
            });
        };
        this.list = function (bucket, keysOnly, filter) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.addRequest({ op: 'filter', bucket: bucket, keysOnly: keysOnly, filter: filter }, function (err, location) {
                                if (err) {
                                    reject(new Error('DataEngine ws FILTER error: ' + JSON.stringify(err) + ' for bucket: ' + bucket));
                                }
                                else {
                                    resolve(location);
                                }
                            });
                        })];
                });
            });
        };
        this.write = function (bucket, key, value, failIfExists, expire) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.addRequest({ op: 'write', bucket: bucket, key: key, value: value, failIfExists: failIfExists, expire: expire }, function (err, location) {
                                if (err) {
                                    var error = ((err.alreadyExists) ? new de_1.AlreadyExistsError("Key " + key + " already exists") :
                                        new Error('DataEngine ws WRITE error: ' + JSON.stringify(err) + ' for bucket: ' + bucket + ', key: ' + key));
                                    reject(error);
                                }
                                else {
                                    resolve(location);
                                }
                            });
                        })];
                });
            });
        };
        this.patch = function (bucket, key, patch, removeDataFromReply) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.addRequest({ op: 'patch', bucket: bucket, key: key, patch: patch, removeDataFromReply: removeDataFromReply }, function (err, result) {
                                if (err) {
                                    reject(new Error('DataEngine ws PATCH error: ' + JSON.stringify(err) + ' for bucket: ' + bucket + ', key: ' + key));
                                }
                                else {
                                    resolve(result);
                                }
                            });
                        })];
                });
            });
        };
        this.delete = function (bucket, key) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.addRequest({ op: 'remove', bucket: bucket, key: key }, function (err) {
                                if (err) {
                                    reject(new Error('DataEngine ws REMOVE error: ' + JSON.stringify(err) + ' for bucket: ' + bucket + ', key: ' + key));
                                }
                                else {
                                    resolve();
                                }
                            });
                        })];
                });
            });
        };
        this.signalEvent = function (bucket, key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var eventObj;
                return __generator(this, function (_a) {
                    eventObj = { bucket: bucket, key: key, value: value };
                    if (this.connected) {
                        this.ws.send(JSON.stringify({ msg: 'event-broadcast', event: eventObj }));
                        return [2, Promise.resolve()];
                    }
                    return [2, Promise.reject(new Error('Cannot call SignalEvent when disconnected'))];
                });
            });
        };
        this.close = function () {
            this.events = [];
            this.skipReconnect = true;
            this.connected = false;
            if ((this.ws) && (this.ws.close)) {
                this.ws.close();
            }
            this.ws = null;
            clearTimeout(this.reconnectTimer);
            clearInterval(this.pingTimer);
            clearTimeout(this.requestTimer);
        };
        this.addListener = function (bucket, key, sendValues, callback) {
            if ((callback == null) || (typeof callback != 'function'))
                throw 'Callback is not a function';
            if (sendValues)
                this.sendValues = true;
            this.events.push({
                bucket: bucket,
                key: key,
                callback: callback
            });
            this.registerEvents();
        };
        this.removeListener = function (callback) {
            this.events = this.events.filter(function (item) { return item.callback !== callback; });
            this.registerEvents();
        };
        this.addRequest = function (obj, callback) {
            this.requestID = this.requestID + 1;
            this.requests[this.requestID] = { timeStamp: new Date(), callback: callback };
            obj.id = this.requestID + '';
            this.ws.send(JSON.stringify({ msg: 'datastore-operation', request: obj }));
        };
        this.handleReponse = function (response) {
            if (this.requests[response.id]) {
                this.requests[response.id].callback(response.error, response.value || response.location);
                this.requests[response.id] = null;
            }
        };
        this.checkRequestTimeouts = function () {
            var _this = this;
            this.requestTimer = setTimeout(function () {
                for (var i in _this.requests) {
                    var req = _this.requests[i + ''];
                    if (req) {
                        var now = new Date().getTime();
                        if (now - _this.requests[i].timeStamp > REQUEST_TIMEOUT) {
                            req.callback('Timeout occured for request ' + req.id);
                            _this.requests[i] = null;
                        }
                    }
                }
                if (!_this.skipReconnect)
                    _this.checkRequestTimeouts();
            }, 1000);
        };
        this.registerEvents = function () {
            if (this.connected) {
                var eventMap = [];
                var eventArr = [];
                for (var i = 0; i < this.events.length; i++) {
                    var eventJson = JSON.stringify(this.events[i]);
                    if (!eventMap[eventJson]) {
                        eventArr.push({
                            bucket: this.events[i].bucket,
                            key: this.events[i].key
                        });
                        eventMap[eventJson] = true;
                    }
                }
                this.ws.send(JSON.stringify({
                    msg: 'register-events',
                    events: eventArr,
                    sendValues: this.sendValues
                }));
            }
        };
        this.enablePing = settings.enablePing;
        this.pingInterval = settings.pingInterval || this.pingInterval;
        var protocol = (settings.secure) ? 'wss://' : 'ws://';
        this.wsStart(protocol + settings.host + ':' + settings.port + settings.path + '?id=' + settings.clientId);
        this.checkRequestTimeouts();
    }
    PersistentConnection.prototype.wsStart = function (url) {
        var _this = this;
        this.skipReconnect = false;
        this.connected = false;
        this.connection = null;
        if (this.pingTimer)
            clearInterval(this.pingTimer);
        if ((this.ws) && (this.ws.close))
            this.ws.close();
        this.ws = new WebSocketClient(url, '', null, null, null, { maxReceivedMessageSize: 128 * 1024 * 1024 });
        if (this.enablePing) {
            this.pingTimer = setInterval(function () {
                if ((_this.ws != null) && (_this.connected)) {
                    _this.ws.send(JSON.stringify({ msg: 'ping' }));
                }
            }, this.pingInterval);
        }
        this.ws.onerror = function (error) {
            if (typeof _this.onError === 'function')
                _this.onError(error);
        };
        this.ws.onmessage = function (message) {
            var eventObj = JSON.parse(message.data);
            if (eventObj.id) {
                _this.id = eventObj.id;
                if (typeof _this.onConnect === 'function') {
                    _this.onConnect(_this);
                }
                return;
            }
            if (eventObj.response) {
                _this.handleReponse(eventObj.response);
                return;
            }
            if (eventObj.pong) {
                if (typeof _this.onPong === 'function') {
                    _this.onPong();
                }
                return;
            }
            _this.eventsReceived++;
            var value = ((typeof eventObj.value !== 'undefined') && (typeof eventObj.isDeleted === 'undefined')) ? eventObj.value : null;
            var obj = {
                bucket: eventObj.bucket,
                key: eventObj.key,
                value: value,
                isDeleted: null
            };
            if (eventObj.isDeleted)
                obj.isDeleted = true;
            for (var i = 0; i < _this.events.length; i++) {
                if (((_this.events[i].bucket === '*') || (_this.events[i].bucket == obj.bucket)) &&
                    ((_this.events[i].key === '*') || (_this.events[i].key == obj.key))) {
                    _this.events[i].callback(obj);
                }
            }
        };
        this.ws.onclose = function () {
            if (_this.connected) {
                _this.connected = false;
                _this.connection = null;
                if (typeof _this.onDisconnect === 'function') {
                    _this.onDisconnect(_this);
                }
            }
            if (!_this.skipReconnect) {
                _this.reconnectTimer = setTimeout(function () {
                    if (!_this.skipReconnect) {
                        _this.wsStart(url);
                    }
                }, 3000);
            }
            ;
        };
        this.ws.onopen = function () {
            _this.connected = true;
            _this.registerEvents();
        };
    };
    return PersistentConnection;
}());
exports.PersistentConnection = PersistentConnection;
