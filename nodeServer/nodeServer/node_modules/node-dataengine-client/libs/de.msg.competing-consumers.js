"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var de_1 = require("./de");
var events_1 = require("events");
var timers_1 = require("timers");
var CHANNEL_PREFIX = 'messaging.compcon';
var DEFAULT_TIMEOUT = 10000;
var DEFAULT_PROGRESS_TIMEOUT = 10000;
exports.JOB_NOT_SUPPORTED = 100;
exports.NO_WORKER_AVAILABLE = 200;
var Worker = (function () {
    function Worker(id) {
        this.available = true;
        this.release = function () {
            this.available = true;
        };
        this.id = id;
    }
    return Worker;
}());
exports.Worker = Worker;
var PendingJob = (function () {
    function PendingJob(callback) {
        var now = new Date().valueOf();
        this.lastProgress = now;
        this.publishTime = now;
        this.callback = callback;
    }
    return PendingJob;
}());
var Producer = (function () {
    function Producer(de, channel, timeout, progressTimeout) {
        var _this = this;
        this.pendingJobs = {};
        this.de = null;
        this.jobQueue = CHANNEL_PREFIX + '.' + channel + '.jobs';
        this.statusQueue = CHANNEL_PREFIX + '.' + channel + '.status';
        this.timeout = timeout || DEFAULT_TIMEOUT;
        this.progressTimeout = progressTimeout || DEFAULT_PROGRESS_TIMEOUT;
        this.de = de;
        this.jobStatusQueueListener = function (ev) {
            if (_this.pendingJobs[ev.key]) {
                _this.pendingJobs[ev.key].lastProgress = new Date().valueOf();
                _this.pendingJobs[ev.key].callback(ev.value.err, ev.value);
                if (ev.value.done) {
                    _this.pendingJobs[ev.key] = null;
                }
            }
        };
        de.connection.addListener(this.statusQueue, '*', true, this.jobStatusQueueListener);
    }
    Producer.prototype.destroy = function () {
        if (this.de.connection) {
            this.de.connection.removeListener(this.jobStatusQueueListener);
        }
    };
    Producer.prototype.addJob = function (job, progressCallback, timeout, progressTimeout) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timeout = timeout || this.timeout;
                        progressTimeout = progressTimeout || this.progressTimeout;
                        id = de_1.generateUUID();
                        return [4, this.de.connection.write(this.jobQueue, id, job)];
                    case 1:
                        _a.sent();
                        return [2, new Promise(function (resolve, reject) {
                                var intervalRef = setInterval(function () {
                                    var now = new Date().valueOf();
                                    var isProgressTimeout = (now > _this.pendingJobs[id].lastProgress + progressTimeout);
                                    var isTimeout = (now > _this.pendingJobs[id].publishTime + timeout);
                                    if (isProgressTimeout || isTimeout) {
                                        _this.pendingJobs[id] = null;
                                        timers_1.clearInterval(intervalRef);
                                        reject(new de_1.TimeoutError("Timeout for job id " + id, isProgressTimeout));
                                    }
                                }, 500);
                                _this.pendingJobs[id] = new PendingJob(function (err, ev) {
                                    if (err) {
                                        timers_1.clearInterval(intervalRef);
                                        reject(new Error(err));
                                    }
                                    else {
                                        if (ev.value.done) {
                                            timers_1.clearInterval(intervalRef);
                                            resolve(ev.value);
                                            _this.de.connection.delete(_this.statusQueue, ev.key);
                                        }
                                        else {
                                            if (typeof progressCallback === 'function')
                                                progressCallback(ev.value);
                                        }
                                    }
                                });
                            })];
                }
            });
        });
    };
    return Producer;
}());
exports.Producer = Producer;
var CompetingConsumer = (function (_super) {
    __extends(CompetingConsumer, _super);
    function CompetingConsumer(de, channel) {
        var _this = _super.call(this) || this;
        _this.waitForWorker = function (job) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            var interval = setInterval(function () {
                                _this.onJobQuery(job, function (errno, worker) {
                                    if (errno == null) {
                                        timers_1.clearInterval(interval);
                                        _this.emit('job', { id: job.id, status: 'Worker assigned' });
                                        resolve(worker);
                                        return;
                                    }
                                    else if (errno == exports.JOB_NOT_SUPPORTED) {
                                        timers_1.clearInterval(interval);
                                        _this.emit('job', { id: job.id, error: 'Not supported' });
                                        reject(new Error('Job not supported'));
                                    }
                                    else if (errno == exports.NO_WORKER_AVAILABLE) {
                                    }
                                    else {
                                        timers_1.clearInterval(interval);
                                        _this.emit('job', { id: job.id, errno: errno });
                                        reject(new Error(errno));
                                    }
                                });
                            }, 100);
                        })];
                });
            });
        };
        _this.statusQueue = CHANNEL_PREFIX + '.' + channel + '.status';
        _this.jobQueue = CHANNEL_PREFIX + '.' + channel + '.jobs';
        _this.de = de;
        _this.jobQueueListener = function (ev) {
            if ((ev.isDeleted) || (ev.value == null))
                return;
            _this.jobHandler(ev.key, ev.value).catch(function (err) { return _this.emit('job', { id: ev.value.id, status: 'No worker' }); });
        };
        de.connection.addListener(_this.jobQueue, '*', true, _this.jobQueueListener);
        return _this;
    }
    CompetingConsumer.prototype.destroy = function () {
        this.de.connection.removeListener(this.jobQueueListener);
        this.removeAllListeners();
    };
    CompetingConsumer.prototype.jobHandler = function (key, job) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var worker, deid, obj_1, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.emit('job', { id: job.id, status: 'Job received' });
                        return [4, this.waitForWorker(job)];
                    case 1:
                        worker = _a.sent();
                        deid = this.de.connection.id;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 6, , 7]);
                        obj_1 = {
                            claim: { id: deid },
                            done: false,
                            err: null,
                            data: null,
                            progress: null
                        };
                        return [4, this.de.connection.write(this.statusQueue, key, obj_1, true)];
                    case 3:
                        _a.sent();
                        return [4, this.de.connection.delete(this.jobQueue, key)];
                    case 4:
                        _a.sent();
                        return [4, worker.work(job, function (err, data) {
                                if (err instanceof Error)
                                    err = err.message;
                                _this.emit('job', { id: job.id, done: true, data: data });
                                _this.de.connection.write(_this.statusQueue, key, __assign({}, obj_1, { err: err, data: data, done: true }));
                            }, function (progress) {
                                _this.emit('job', { id: job.id, done: false, progress: progress });
                                _this.de.connection.write(_this.statusQueue, key, __assign({}, obj_1, { progress: progress }));
                            })];
                    case 5:
                        _a.sent();
                        return [3, 7];
                    case 6:
                        err_1 = _a.sent();
                        worker.release();
                        if (!(err_1 instanceof de_1.AlreadyExistsError)) {
                            throw err_1;
                        }
                        return [3, 7];
                    case 7: return [2];
                }
            });
        });
    };
    return CompetingConsumer;
}(events_1.EventEmitter));
exports.CompetingConsumer = CompetingConsumer;
